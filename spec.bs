<pre class='metadata'>
Title: The DCAT-AP Feed specification
Shortname: DCAT-AP-Feeds
Level: 1
Status: LS
Markup Shorthands: markdown yes
URL: https://semiceu.github.io/LDES-DCAT-AP-feeds/index.html
Repository: https://github.com/SEMICeu/LDES-DCAT-AP-feeds
Editor: Pieter Colpaert, https://pietercolpaert.be
Abstract:
     This spec describes how to publish your DCAT-AP entity changes using the Activity Streams vocabulary and LDES.
</pre>


# Publishing changes about DCAT-AP entities

##  Example

```turtle
@prefix : <https://data.example.org/feed> .
@prefix ldes: <https://w3id.org/ldes#>.
@prefix tree: <https://w3id.org/tree#>.
@prefix as:  <https://www.w3.org/ns/activitystreams#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix dcat: <http://www.w3.org/ns/dcat#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.


:#Stream a ldes:EventStream ;
    tree:member <Dataset1#Event1>, <DataService1#Event1> ;
    ldes:timestampPath as:published ;
    ldes:versionOfPath as:object ;
    tree:view : .

: tree:viewDescription [
    #recommended: a retention policy to only keep the last update about a thing
        ldes:retentionPolicy [
            a ldes:LatestVersionSubset ;
            ldes:amount 1    
        ]
    ] ;
    # Recommended: multiple pages in a B-tree fragmentation
    tree:relation [
        a tree:GreaterThanOrEqualToRelation ;
        tree:path as:published ;
        tree:value "2020-01-01T00:00:00Z"^^xsd:dateTime ;
        tree:node :2020
    ] ,
    [
        a tree:LessThanRelation ;
        tree:path as:published ;
        tree:value  "2021-01-01T00:00:00Z"^^xsd:dateTime ;
        tree:node :2020
    ]
    #... More relations
    .


<Dataset1#Event1> a as:Create ;
    as:object <Dataset1> ;
    as:published "2023-10-01" .

<Dataset1#Event1>  {
    <Dataset1> a dcat:Dataset ;
        ## The updated representation of this particular dataset
        ## ...
}
```

# Publishing a harverster’s event log


## Step 1: describing the workflow of the harvester

We propose using P-Plan to describe the plan in which multiple LDESes can be harvested.

```turtle
#TODO
```

## Step 2: describing the harvester’s log

On top of the `prov:Activity`, an `ldes:harvesterLog` predicate will point to the LDES of the log.
This should point to an LDES for which all members are an `as:Activity` of adding an object or not adding an object to another LDES.